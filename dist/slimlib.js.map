{"version":3,"sources":["slimlib.js"],"names":["SlimView","sv","Config","endpoint","token","previewPage","targetLanguage","projectCode","extra","MessageChannel","config","_config","slimviewRef","_viewId","_listenerClosure","ev","_onError","_onMessage","onError","onMessage","url","_buildSlimViewUrl","window","open","that","_onMessageArrived","call","addEventListener","close","removeEventListener","_validateMessageSource","console","warn","source","data","message","_decodeMessage","_routeMessage","params","_postResponse","_errorCommands","indexOf","command","messageMap","envelope","postMessage","JSON","stringify","_endpointOrigin","requestId","_getRandomString","parse","origin","_parseUrl","parser","document","createElement","href","channel","endpointUri","pathname","replace","endpointString","encodeURIComponent","key","Math","random","toString","substring","Channel","_validateConfig","_messageChannel","_errorCallback","_messageCallback","start","stop","callback","id","postRequest","fragment","translation","save","update","previewUrl"],"mappings":"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","file":"slimlib.js","sourcesContent":["const SlimView = function (sv) {\n    'use strict';\n\n    /**\n     * Configuration class for SlimView to operate with.\n     */\n    class Config {\n        constructor() {\n            /**\n             * SlimView's endpoint\n             * @type {string}\n             */\n            this.endpoint = '';\n            /**\n             * Access Token\n             * @type {string}\n             */\n            this.token = '';\n            /**\n             * Page to load SlimView with\n             * @type {string}\n             */\n            this.previewPage = '';\n            /**\n             * Language of the Preview\n             * @type {string}\n             */\n            this.targetLanguage = '';\n            /**\n             * Project code to load the SlimView for\n             * @type {string}\n             */\n            this.projectCode = '';\n\n            /**\n             * Extra parameters to pass to SlimView\n             * @type {Map.<String, String>}\n             */\n            this.extra = {};\n        }\n    }\n\n    class MessageChannel {\n\n        /**\n         * @param {Config} config\n         */\n        constructor(config) {\n            /**\n             * @type {Config}\n             * @private\n             */\n            this._config = config;\n            /**\n             * SlimView's window\n             * @type {Window}\n             */\n            this.slimviewRef = null;\n            /**\n             * SlimView window instance identified by ViewId\n             * @type {?string}\n             * @private\n             */\n            this._viewId = null;\n            /**\n             * Listener closure that handles message events and scoping of execution\n             * @param ev\n             * @private\n             */\n            this._listenerClosure = (ev) => {\n            };\n\n            this._onError = null;\n            this._onMessage = null;\n        }\n\n        /**\n         * Starts SlimView\n         * Opens it in a new window, start listening to messages and goes through the handshake\n         * @param {Channel~errorCallback} onError\n         * @param {Channel~messageCallback} onMessage\n         */\n        start(onError, onMessage) {\n            if(!!this.slimviewRef) throw 'SlimView seems to have already been loaded';\n            this._onError = onError;\n            this._onMessage = onMessage;\n            // open\n            let url = MessageChannel._buildSlimViewUrl(this);\n            this.slimviewRef = window.open(url, 'Preview', 'height=800px,width=1000px,modal=yes,alwaysRaised=yes');\n            // onError\n            const that = this;\n            this._listenerClosure = (ev) => {\n                that._onMessageArrived.call(that, ev);\n            };\n            window.addEventListener('message', this._listenerClosure, false);\n        }\n\n        /**\n         * Closes SlimView and stops listening for messages\n         */\n        stop() {\n            this.slimviewRef.close();\n            this.slimviewRef = null;\n            window.removeEventListener('message', this._listenerClosure, false);\n        }\n\n        _onMessageArrived(ev) {\n            if (!this._validateMessageSource(ev)) {\n                console.warn('Message Arrived from invalid source: ', ev.source, ev.data);\n                return;\n            }\n            var message = this._decodeMessage(ev.data);\n            // TODO: viewId validation\n            this._routeMessage(message);\n        }\n\n        _routeMessage(message) {\n            // TODO: validate requestId\n            switch (message['command']) {\n                case 'slimViewLoaded':\n                    // respond with 'vendorReady' + token\n                    let params = {};\n                    if (!!this._config.token) {\n                        params['accessToken'] = this._config.token;\n                    }\n                    this._postResponse('vendorReady', params);\n                    break;\n                case 'vendorReady':\n                    // empty message queue\n                    // TODO: implement message queue\n                    break;\n                default:\n                // call callback\n            }\n            if (MessageChannel._errorCommands.indexOf(message['command']) >= 0) {\n                this._onError.call(null, message);\n            } else {\n                this._onMessage.call(null, message);\n            }\n        }\n\n        _postResponse(command, messageMap) {\n            let envelope = {\n                'command': command,\n                'viewId': this._viewId,\n                'response': messageMap\n            };\n            this.slimviewRef.postMessage(JSON.stringify(envelope), this._endpointOrigin);\n        }\n\n        postRequest(command, messageMap) {\n            let requestId = MessageChannel._getRandomString();\n            let envelope = {\n                'command': command,\n                'viewId': this._viewId,\n                'messageId': requestId,\n                'parameters': messageMap\n            };\n            // TODO: register requestId\n            this.slimviewRef.postMessage(JSON.stringify(envelope), this._endpointOrigin);\n        }\n\n        _decodeMessage(data) {\n            return JSON.parse(data);\n        }\n\n        /**\n         * Parses the endpoint and returns the origin of the SlimView\n         * @returns {string}\n         * @private\n         */\n        get _endpointOrigin() {\n            return MessageChannel._parseUrl(this._config.endpoint).origin;\n        }\n\n        /**\n         * Validates that the message arrived from the window\n         * MessageChannel opened and that the origin of it matches\n         * SlimView's.\n         * @param {MessageEvent} ev\n         * @returns {boolean}\n         */\n        _validateMessageSource(ev) {\n            return ev.source === this.slimviewRef\n                && ev.origin === this._endpointOrigin;\n        }\n\n        /**\n         * @param {String} url\n         * @returns {Element}\n         * @private\n         */\n        static _parseUrl(url) {\n            /**\n             * @type {HTMLAnchorElement}\n             */\n            var parser = document.createElement('a');\n            parser.href = url;\n            return parser;\n        }\n\n        /**\n         * @param channel\n         * @returns {string}\n         * @private\n         */\n        static _buildSlimViewUrl(channel) {\n            // targetLanguage\n            // url\n            // viewId\n            // o = '2'\n            const config = channel._config;\n            let endpointUri = MessageChannel._parseUrl(config.endpoint);\n            channel._viewId = MessageChannel._getRandomString();\n            let pathname = endpointUri.pathname.replace(/\\/$/, '');\n            let endpointString = endpointUri.origin + pathname + '/' + config.projectCode\n                + '?targetLanguage=' + config.targetLanguage\n                + '&url=' + encodeURIComponent(config.previewPage)\n                + '&viewId=' + channel._viewId;\n            if (!!config.extra && typeof config.extra === 'object') {\n                for (let key in config.extra) {\n                    endpointString += '&' + key + '=' + config.extra[key];\n                }\n                if (!('o' in config.extra)) {\n                    endpointString += '&o=2'\n                }\n            } else {\n                endpointString += '&o=2'\n            }\n            return endpointString;\n        }\n\n        /**\n         * Random string for ViewId\n         * @returns {string}\n         * @private\n         */\n        static _getRandomString() {\n            return Math.random().toString(36).substring(7);\n        }\n\n        static get _errorCommands() {\n            return ['invalidAccessToken'];\n        }\n    }\n\n    /**\n     * Channel is responsible for handling\n     *  - secrutiy\n     *  - opening/closing it\n     *  - sending and routing messages to and from SlimView\n     */\n    class Channel {\n        constructor(config) {\n            Channel._validateConfig(config);\n            /**\n             * @type {Config}\n             */\n            this._config = config;\n\n            /**\n             * @type {MessageChannel}\n             * @private\n             */\n            this._messageChannel = null;\n            /**\n             * @type {Channel~errorCallback} message\n             * @private\n             */\n            this._errorCallback = null;\n            /**\n             *\n             * @type {Channel~messageCallback|null}\n             * @private\n             */\n            this._messageCallback = null;\n        }\n\n        /**\n         * @type {Config}\n         */\n        get config() {\n            return this._config;\n        }\n\n        /**\n         * Is SlimView window opened?\n         * @returns {boolean}\n         */\n        get isOpen() {\n            return this._messageChannel !== null && !!this._messageChannel.slimviewRef;\n        }\n\n        /**\n         * Window reference for the SlimView\n         * @returns {Window|*}\n         */\n        get window() {\n            return this._messageChannel == null ? null : this._messageChannel.slimviewRef;\n        }\n\n        /**\n         * Opens SlimView with provided configuration\n         */\n        openInNewWindow() {\n            if (!this._errorCallback) {\n                throw 'You need to specify a callback with .onError() before you can open SlimView'\n            }\n            this._messageChannel = new MessageChannel(this.config);\n            this._messageChannel.start(this._errorCallback, this._messageCallback);\n        }\n\n        /**\n         * Stops listening on message events and closes the SlimView window\n         */\n        close() {\n            this._messageChannel.stop();\n        }\n\n        /**\n         * Register callback function to invoke when an error message arrives from SlimView\n         * @param {Channel~errorCallback} callback\n         */\n        onError(callback) {\n            this._errorCallback = callback;\n        }\n\n        /**\n         * Callback that is invoked when a message arrives from SlimView\n         * @param {Channel~messageCallback} callback\n         */\n        onMessage(callback) {\n            this._messageCallback = callback;\n        }\n\n        /**\n         * Highlight an entry in SlimView\n         * @param {string} id Id of the Segment to highlight\n         */\n        highlight(id) {\n            this._messageChannel.postRequest('view', {\n                'highlightedEntry': id\n            });\n        }\n\n        /**\n         * Instruct SlimView to perfoem a search for given content fragment\n         * @param {string} fragment Fragment to search for\n         */\n        find(fragment) {\n            throw \"Unimplemented\";\n        }\n\n        /**\n         * Send a translation to SlimView\n         * @param {string} id Id of the Segment to highlight\n         * @param {string} translation Translation to replace current content with\n         * @param {boolean} save Attempt to save translation in Easylnig\n         */\n        translate(id, translation, save) {\n            if (save === true) {\n                console.warn(\"Current SlimView does not support saving - it is operating in a read-only mode\");\n                save = false;\n            }\n            let update = [{\n                'key': id,\n                'target': translation,\n                'propagate': true\n            }];\n            this._messageChannel.postRequest('submitTargets', {\n                'updates': update,\n                'save': save\n            })\n        }\n\n        /**\n         * Navigate SlimView to a different page\n         * @param {string} previewUrl\n         */\n        navigate(previewUrl) {\n            // TODO: implement\n            // this._messageChannel.postRequest('setHighlightView', {\n            //     'uri': previewUrl\n            // });\n        }\n\n        /**\n         * Highlighting will be enabled in SlimView\n         */\n        enableHighlighting() {\n            this._messageChannel.postRequest('view', {\n                'mode': 'highlight'\n            });\n        }\n\n        /**\n         * Highlighting will be disabled in SlimView - users can navigate between pages\n         */\n        disableHighlighting() {\n            this._messageChannel.postRequest('view', {\n                'mode': 'free-click'\n            });\n        }\n\n        static _validateConfig(config) {\n            if (!config || !(config instanceof Config)) {\n                throw \"Channel expects first parameter to be SlimView.Config\"\n            }\n        }\n    }\n\n    /**\n     * @callback Channel~errorCallback\n     * @param {Map} event data\n     */\n    /**\n     * @callback Channel~messageCallback\n     * @param {Map} event data\n     */\n\n    sv.Channel = Channel;\n    sv.Config = Config;\n    return sv;\n}(SlimView || {});\n"]}