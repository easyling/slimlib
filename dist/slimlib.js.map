{"version":3,"sources":["slimlib.js"],"names":[],"mappings":"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","file":"slimlib.js","sourcesContent":["var SlimView = function (sv) {\n    'use strict';\n\n    /**\n     * Configuration class for SlimView to operate with.\n     */\n    class Config {\n        constructor() {\n            /**\n             * SlimView's endpoint\n             * @type {string}\n             */\n            this.endpoint = '';\n            /**\n             * Access Token\n             * @type {string}\n             */\n            this.token = '';\n            /**\n             * Page to load SlimView with\n             * @type {string}\n             */\n            this.previewPage = '';\n            /**\n             * Language of the Preview\n             * @type {string}\n             */\n            this.targetLanguage = '';\n            /**\n             * Project code to load the SlimView for\n             * @type {string}\n             */\n            this.projectCode = '';\n\n            /**\n             * Extra parameters to pass to SlimView\n             * @type {Map.<String, String>}\n             */\n            this.extra = {};\n        }\n    }\n\n    class MessageChannel {\n\n        /**\n         * @param {Config} config\n         */\n        constructor(config) {\n            /**\n             * @type {Config}\n             * @private\n             */\n            this._config = config;\n            /**\n             * SlimView's window\n             * @type {Window}\n             */\n            this.slimviewRef = null;\n            /**\n             * SlimView window instance identified by ViewId\n             * @type {string}\n             * @private\n             */\n            this._viewId = null;\n            /**\n             * Listener closure that handles message events and scoping of execution\n             * @param ev\n             * @private\n             */\n            this._listenerClosure = (ev) => {\n            };\n\n            this._onError = null;\n            this._onMessage = null;\n        }\n\n        /**\n         * Starts SlimView\n         * Opens it in a new window, start listening to messages and goes through the handshake\n         * @param {Channel~errorCallback} onError\n         * @param {Channel~messageCallback} onMessage\n         */\n        start(onError, onMessage) {\n            this._onError = onError;\n            this._onMessage = onMessage;\n            // open\n            var url = MessageChannel._buildSlimViewUrl(this);\n            this.slimviewRef = window.open(url, 'Preview', 'height=800px,width=1000px,modal=yes,alwaysRaised=yes');\n            // onError\n            var that = this;\n            this._listenerClosure = (ev) => {\n                that._onMessageArrived.call(that, ev);\n            };\n            window.addEventListener('message', this._listenerClosure, false);\n        }\n\n        /**\n         * Closes SlimView and stops listening for messages\n         */\n        stop() {\n            this.slimviewRef.close();\n            this.slimviewRef = null;\n            window.removeEventListener('message', this._listenerClosure, false);\n        }\n\n        _onMessageArrived(ev) {\n            if (!this._validateMessageSource(ev)) {\n                console.warn('Message Arrived from invalid source: ', ev.source, ev.data);\n                return;\n            }\n            var message = this._decodeMessage(ev.data);\n            // TODO: viewId validation\n            this._routeMessage(message);\n        }\n\n        _routeMessage(message) {\n            // TODO: validate requestId\n            switch (message['command']) {\n                case 'slimViewLoaded':\n                    // respond with 'vendorReady' + token\n                    var params = {};\n                    if (!!this._config.token) {\n                        params['accessToken'] = this._config.token;\n                    }\n                    this._postResponse('vendorReady', params);\n                    break;\n                case 'vendorReady':\n                    // empty message queue\n                    // TODO: implement message queue\n                    break;\n                default:\n                // call callback\n            }\n            if (MessageChannel._errorCommands.indexOf(message['command']) >= 0) {\n                this._onError.call(null, message);\n            } else {\n                this._onMessage.call(null, message);\n            }\n        }\n\n        _postResponse(command, messageMap) {\n            var envelope = {\n                'command': command,\n                'viewId': this._viewId,\n                'response': messageMap\n            };\n            this.slimviewRef.postMessage(JSON.stringify(envelope), this._endpointOrigin);\n        }\n\n        postRequest(command, messageMap) {\n            var requestId = MessageChannel._getRandomString();\n            var envelope = {\n                'command': command,\n                'viewId': this._viewId,\n                'messageId': requestId,\n                'parameters': messageMap\n            };\n            // TODO: register requestId\n            this.slimviewRef.postMessage(JSON.stringify(envelope), this._endpointOrigin);\n        }\n\n        _decodeMessage(data) {\n            return JSON.parse(data);\n        }\n\n        /**\n         * Parses the endpoint and returns the origin of the SlimView\n         * @returns {string}\n         * @private\n         */\n        get _endpointOrigin() {\n            return MessageChannel._parseUrl(this._config.endpoint).origin;\n        }\n\n        /**\n         * Validates that the message arrived from the window\n         * MessageChannel opened and that the origin of it matches\n         * SlimView's.\n         * @param {MessageEvent} ev\n         * @returns {boolean}\n         */\n        _validateMessageSource(ev) {\n            return ev.source === this.slimviewRef\n                && ev.origin === this._endpointOrigin;\n        }\n\n        /**\n         * @param {String} url\n         * @returns {Element}\n         * @private\n         */\n        static _parseUrl(url) {\n            /**\n             * @type {HTMLAnchorElement}\n             */\n            var parser = document.createElement('a');\n            parser.href = url;\n            return parser;\n        }\n\n        /**\n         * @param channel\n         * @returns {string}\n         * @private\n         */\n        static _buildSlimViewUrl(channel) {\n            // targetLanguage\n            // url\n            // viewId\n            // o = '2'\n            var config = channel._config;\n            var endpointUri = MessageChannel._parseUrl(config.endpoint);\n            channel._viewId = MessageChannel._getRandomString();\n            var endpointString = endpointUri.origin + '/_sd/slim/' + config.projectCode\n                + '?targetLanguage=' + config.targetLanguage\n                + '&url=' + encodeURIComponent(config.previewPage)\n                + '&viewId=' + channel._viewId;\n            if (!!config.extra && typeof config.extra === 'object') {\n                for (var key in config.extra) {\n                    endpointString += '&' + key + '=' + config.extra[key];\n                }\n                if (!('o' in config.extra)) {\n                    endpointString += '&o=2'\n                }\n            } else {\n                endpointString += '&o=2'\n            }\n            return endpointString;\n        }\n\n        /**\n         * Random string for ViewId\n         * @returns {string}\n         * @private\n         */\n        static _getRandomString() {\n            return Math.random().toString(36).substring(7);\n        }\n\n        static get _errorCommands() {\n            return ['invalidAccessToken'];\n        }\n    }\n\n    /**\n     * Channel is responsible for handling\n     *  - secrutiy\n     *  - opening/closing it\n     *  - sending and routing messages to and from SlimView\n     */\n    class Channel {\n        constructor(config) {\n            Channel._validateConfig(config);\n            /**\n             * @type {Config}\n             */\n            this._config = config;\n\n            /**\n             * @type {MessageChannel}\n             * @private\n             */\n            this._messageChannel = null;\n            /**\n             * @type {Channel~errorCallback} message\n             * @private\n             */\n            this._errorCallback = null;\n            /**\n             *\n             * @type {null}\n             * @private\n             */\n            this._messageCallback = null;\n        }\n\n        /**\n         * @type {Config}\n         */\n        get config() {\n            return this._config;\n        }\n\n        /**\n         * Is SlimView window opened?\n         * @returns {boolean}\n         */\n        get isOpen() {\n            return this._messageChannel !== null && !!this._messageChannel.slimviewRef;\n        }\n\n        /**\n         * Window reference for the SlimView\n         * @returns {Window|*}\n         */\n        get window() {\n            return this._messageChannel == null ? null : this._messageChannel.slimviewRef;\n        }\n\n        /**\n         * Opens SlimView with provided configuration\n         */\n        openInNewWindow() {\n            if (!this._errorCallback) {\n                throw 'You need to specify a callback with .onError() before you can open SlimView'\n            }\n            this._messageChannel = new MessageChannel(this.config);\n            this._messageChannel.start(this._errorCallback, this._messageCallback);\n        }\n\n        /**\n         * Stops listening on message events and closes the SlimView window\n         */\n        close() {\n            this._messageChannel.stop();\n        }\n\n        /**\n         * Register callback function to invoke when an error message arrives from SlimView\n         * @param {Channel~errorCallback} callback \n         */\n        onError(callback) {\n            this._errorCallback = callback;\n        }\n\n        /**\n         * Callback that is invoked when a message arrives from SlimView\n         * @param {Channel~messageCallback} callback\n         */\n        onMessage(callback) {\n            this._messageCallback = callback;\n        }\n\n        /**\n         * Highlight an entry in SlimView\n         * @param {string} id Id of the Segment to highlight\n         */\n        highlight(id) {\n            this._messageChannel.postRequest('view', {\n                'highlightedEntry': id\n            });\n        }\n\n        /**\n         * Instruct SlimView to perfoem a search for given content fragment\n         * @param {string} fragment Fragment to search for\n         */\n        find(fragment) {\n            throw \"Unimplemented\";\n        }\n\n        /**\n         * Send a translation to SlimView\n         * @param {string} id Id of the Segment to highlight\n         * @param {string} translation Translation to replace current content with\n         * @param {boolean} save Attempt to save translation in Easylnig\n         */\n        translate(id, translation, save) {\n            if (save === true) {\n                console.warn(\"Current SlimView does not support saving - it is operating in a read-only mode\");\n                save = false;\n            }\n            var update = [{\n                'key': id,\n                'target': translation,\n                'propagate': true\n            }];\n            this._messageChannel.postRequest('submitTargets', {\n                'updates': update,\n                'save': save\n            })\n        }\n\n        /**\n         * Navigate SlimView to a different page\n         * @param {string} previewUrl\n         */\n        navigate(previewUrl) {\n            // TODO: implement\n            // this._messageChannel.postRequest('setHighlightView', {\n            //     'uri': previewUrl\n            // });\n        }\n\n        /**\n         * Highlighting will be enabled in SlimView\n         */\n        enableHighlighting() {\n            this._messageChannel.postRequest('view', {\n                'mode': 'highlight'\n            });\n        }\n\n        /**\n         * Highlighting will be disabled in SlimView - users can navigate between pages\n         */\n        disableHighlighting() {\n            this._messageChannel.postRequest('view', {\n                'mode': 'free-click'\n            });\n        }\n\n        static _validateConfig(config) {\n            if (!config || !(config instanceof Config)) {\n                throw \"Channel expects first parameter to be SlimView.Config\"\n            }\n        }\n    }\n\n    /**\n     * @callback Channel~errorCallback\n     * @param {Map} event data\n     */\n    /**\n     * @callback Channel~messageCallback\n     * @param {Map} event data\n     */\n\n    sv.Channel = Channel;\n    sv.Config = Config;\n    return sv;\n}(SlimView || {});"],"sourceRoot":"/source/"}